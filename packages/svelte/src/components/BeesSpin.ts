/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@bees-ui/core';


interface BeesSpinProps {
  
  /**  */
  prefixCls?: Components.BeesSpin["prefixCls"]
  
  /**  */
  spinning?: Components.BeesSpin["spinning"]
  
  /**  */
  size?: Components.BeesSpin["size"]
  
  /**  */
  tip?: Components.BeesSpin["tip"]
  
  /**  */
  wrapperClassName?: Components.BeesSpin["wrapperClassName"]
  
  /**  */
  delay?: Components.BeesSpin["delay"]
  
  /**  */
  indicator?: Components.BeesSpin["indicator"]
}

interface BeesSpinEvents {
  
}

interface BeesSpinSlots {
  default: any
}
  
/* generated by Svelte v4.2.9 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import "svelte/internal/disclose-version";
import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let bees_spin;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			bees_spin = element("bees-spin");
			if (default_slot) default_slot.c();
			set_custom_element_data(bees_spin, "prefix-cls", /*prefixCls*/ ctx[0]);
			set_custom_element_data(bees_spin, "spinning", /*spinning*/ ctx[1]);
			set_custom_element_data(bees_spin, "size", /*size*/ ctx[2]);
			set_custom_element_data(bees_spin, "tip", /*tip*/ ctx[3]);
			set_custom_element_data(bees_spin, "wrapper-class-name", /*wrapperClassName*/ ctx[4]);
			set_custom_element_data(bees_spin, "delay", /*delay*/ ctx[5]);
			set_custom_element_data(bees_spin, "indicator", /*indicator*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, bees_spin, anchor);

			if (default_slot) {
				default_slot.m(bees_spin, null);
			}

			/*bees_spin_binding*/ ctx[11](bees_spin);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*prefixCls*/ 1) {
				set_custom_element_data(bees_spin, "prefix-cls", /*prefixCls*/ ctx[0]);
			}

			if (!current || dirty & /*spinning*/ 2) {
				set_custom_element_data(bees_spin, "spinning", /*spinning*/ ctx[1]);
			}

			if (!current || dirty & /*size*/ 4) {
				set_custom_element_data(bees_spin, "size", /*size*/ ctx[2]);
			}

			if (!current || dirty & /*tip*/ 8) {
				set_custom_element_data(bees_spin, "tip", /*tip*/ ctx[3]);
			}

			if (!current || dirty & /*wrapperClassName*/ 16) {
				set_custom_element_data(bees_spin, "wrapper-class-name", /*wrapperClassName*/ ctx[4]);
			}

			if (!current || dirty & /*delay*/ 32) {
				set_custom_element_data(bees_spin, "delay", /*delay*/ ctx[5]);
			}

			if (!current || dirty & /*indicator*/ 64) {
				set_custom_element_data(bees_spin, "indicator", /*indicator*/ ctx[6]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(bees_spin);
			}

			if (default_slot) default_slot.d(detaching);
			/*bees_spin_binding*/ ctx[11](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { prefixCls = undefined } = $$props;
	let { spinning = undefined } = $$props;
	let { size = undefined } = $$props;
	let { tip = undefined } = $$props;
	let { wrapperClassName = undefined } = $$props;
	let { delay = undefined } = $$props;
	let { indicator = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(7, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function bees_spin_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(7, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('prefixCls' in $$props) $$invalidate(0, prefixCls = $$props.prefixCls);
		if ('spinning' in $$props) $$invalidate(1, spinning = $$props.spinning);
		if ('size' in $$props) $$invalidate(2, size = $$props.size);
		if ('tip' in $$props) $$invalidate(3, tip = $$props.tip);
		if ('wrapperClassName' in $$props) $$invalidate(4, wrapperClassName = $$props.wrapperClassName);
		if ('delay' in $$props) $$invalidate(5, delay = $$props.delay);
		if ('indicator' in $$props) $$invalidate(6, indicator = $$props.indicator);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		prefixCls,
		spinning,
		size,
		tip,
		wrapperClassName,
		delay,
		indicator,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		bees_spin_binding
	];
}

class BeesSpin extends SvelteComponent {
  $$prop_def: BeesSpinProps;
  $$events_def: BeesSpinEvents;
  $$slot_def: BeesSpinSlots;

  $on<K extends keyof BeesSpinEvents>(type: K, callback: (e: BeesSpinEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<BeesSpinProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			prefixCls: 0,
			spinning: 1,
			size: 2,
			tip: 3,
			wrapperClassName: 4,
			delay: 5,
			indicator: 6,
			getWebComponent: 8
		});
	}

	get getWebComponent(): HTMLBeesSpinElement | undefined {
		return this.$$.ctx[8];
	}
}

export default BeesSpin;